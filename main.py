import random

import telebot
import sqlite3


from telebot import types, TeleBot

bot: TeleBot = telebot.TeleBot('TOKEN')

cups_max = {'default': 6, 'vip': 5, 'special': 3}

cardid = 0
drunkcups = 0
cups = 0
cupsav = 0
i = ''
tags = ''
tagsus = ''

cups_endarray = {''}


def getCupsEnding(number):
    number = number % 100
    if 11 <= number <= 19:
        end = f'–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ {number} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä—É–∂–µ–∫'
    else:
        if number == 1:
            end = f'–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ {number} –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫—Ä—É–∂–∫–∞'
        elif number == 2 or number == 3 or number == 4:
            end = f'–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ {number} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä—É–∂–∫–∏'
        else:
            end = f'–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ {number} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä—É–∂–µ–∫'

    end += '\n\nüå± –°–æ–æ–±—â–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–ª—É—á–∏ –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!'

    return end

def startcustomer(message):
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞—á–∏—Å–ª–∏—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –∫—Ä—É–∂–∫–∏',
                     reply_markup=markup)
    bot.register_next_step_handler(message, cupsinfo)

@bot.message_handler(commands=['start'])
def start(message):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—ç–≥ –∞–¥–º–∏–Ω–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏ / –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    conn = sqlite3.connect('heypopei.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int primary key, tgid, cardid, cups int DEFAULT 0, '
                'tags TEXT DEFAULT " " NOT NULL, authcode)')
    conn.commit()
    cur.close()
    conn.close()

    tgid = message.from_user.id

    conn = sqlite3.connect('heypopei.sql')
    cur = conn.cursor()

    cur.execute("SELECT cardid, tags, cups FROM users WHERE tgid=?", (tgid,))
    info = cur.fetchone()

    cur.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup()
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª 0 —Å—Ç—Ä–æ–∫, —Ç–æ... / –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if info is not None and 'admin' in info[1]:
        btnadm = types.KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ')
        btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å/–í—ã–¥–∞—Ç—å –∫—Ä—É–∂–∫–∏')
        markup.row(btnadm, btn1)
    if info is None:
        btn1 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        markup.row(btn1)
    else:
        btn2 = types.KeyboardButton('–ú–µ–Ω—é')
        btn3 = types.KeyboardButton('–ê–∫—Ü–∏–∏')
        markup.row(btn2, btn3)
        btn4 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã')
        btn5 = types.KeyboardButton('–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?')
        markup.row(btn4, btn5)
    logo = open('./photo.jpg', 'rb')

    if info is not None and 'customer' in info[1]:
        startcustomer(message)
    elif info is not None:  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            i = 'default'
            cups = info[2]
            if 'vip' in info[1]:
                i = 'vip'
            if 'special' in info[1]:
                i = 'special'
            cupsav = cups // cups_max[i]
            napom = "<b>\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–∏—Ç—ã–µ –∫—Ä—É–∂–∫–∏!</b>"
            bot.send_photo(message.chat.id, logo, f'–ü—Ä–∏–≤–µ—Ç üçÉ\n\n–¢–≤–æ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <b>{info[0]}</b>\n'
                                                  f'–í—ã–ø–∏—Ç–æ –∫—Ä—É–∂–µ–∫ ‚òï: <b>{cups} / {cups_max[i]}</b>'
                                                  f'\n\n<b>{getCupsEnding(cupsav) if cupsav > 0 else f"–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫—Ä—É–∂–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {cups_max[i] - cups} üå± {napom} "}</b>', reply_markup=markup, parse_mode='html')
    else:
        bot.send_photo(message.chat.id, logo, f'–ü—Ä–∏–≤–µ—Ç!', reply_markup=markup)


@bot.message_handler(commands=['help'])
def main(message):
    bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏')


@bot.message_handler(commands=['id'])
def main(message):
    bot.reply_to(message, f'ID: {message.from_user.id}')

@bot.message_handler()
def inform(message):
    if message.text.lower() == '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥, \
        # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (ID Telegram, Card ID, tags)
        tgid = message.from_user.id
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å
        # —Ç–∞–∫–∏–º –∏–¥ —Ç–≥ –≤ –±–∞–∑–µ
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute("SELECT cardid FROM users WHERE tgid=?", (tgid, ))
        info = cur.fetchone()

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É, —Ç–æ...
        if info is not None:
            bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n–í–∞—à –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞: {info[0]}')
        else:
            cardid = random.randint(10000, 99999)
            cur.execute("SELECT cardid FROM users WHERE cardid=?", (cardid,))
            info = cur.fetchone()
            if info is not None:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω
                # –º–µ—Ä, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
                while info[0] == cardid:
                    cardid = random.randint(10000, 99999)
                    cur.execute("SELECT cardid FROM users WHERE cardid=?", (cardid,))
                    info = cur.fetchone()

            else:
                cur.execute(f'INSERT INTO users (tgid, cardid) VALUES ({tgid}, {cardid})')
                conn.commit()
                cur.close()
                conn.close()
                markup = types.ReplyKeyboardMarkup()
                btn2 = types.KeyboardButton('–ú–µ–Ω—é')
                btn3 = types.KeyboardButton('–ê–∫—Ü–∏–∏')
                markup.row(btn2, btn3)
                btn4 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã')
                btn5 = types.KeyboardButton('–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?')
                markup.row(btn4, btn5)
                bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞: {cardid} '
                                                  f'\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–æ—Ñ–µ–π–Ω–∏, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏'
                                                  f' "–®–µ—Å—Ç–∞—è –∫—Ä—É–∂–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫"!', reply_markup=markup)

    if message.text.lower() == '–º–µ–Ω—é' or message.text.lower() == '/menu':
        menu1 = open('./menu1.PNG', 'rb')
        menu2 = open('./menu2.PNG', 'rb')
        bot.send_media_group(message.chat.id,
                             [telebot.types.InputMediaPhoto(menu1), telebot.types.InputMediaPhoto(menu2)])
    if message.text.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã' or message.text.lower() == '/contacts':
        bot.send_message(message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω: +7‚Äí953‚Äí625‚Äí61‚Äí95\nEmail: hey.popei.coffee@gmail.com',
                         parse_mode='html')
    if message.text.lower() == '–∞–∫—Ü–∏–∏' or message.text.lower() == '/proms':
        tgid = message.from_user.id

        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute("SELECT tags FROM users WHERE tgid=?", (tgid,))
        info = cur.fetchone()
        global tags
        tags = info[0]

        if 'special' in tags:
            bot.send_message(message.chat.id, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –¢—Ä–µ—Ç—å—è –∫—Ä—É–∂–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫!')
        elif 'vip' in tags:
            bot.send_message(message.chat.id, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ü—è—Ç–∞—è –∫—Ä—É–∂–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫!')
        else:
            bot.send_message(message.chat.id, '–®–µ—Å—Ç–∞—è –∫—Ä—É–∂–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫!')
    if message.text.lower() == '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?' or message.text.lower() == '/address':
        bot.send_message(message.chat.id, '1-—è –ö—É—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 27, –ù–æ–≤–æ—Å–∏–ª—å—Å–∫–∞—è —Å–ª–æ–±–æ–¥–∞ \
        \n–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω, –û—Ä–µ–ª, 302030\n –ú—ã –≤ <a href="https://yandex.ru/maps/org/ey_popey/192777247256/">'
                                          '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö</a>\n –ú—ã –≤ <a href="'
                                          'https://2gis.ru/orel/firm/70000001076379036">2–ì–ò–°</a>', parse_mode='html')
    if message.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å/–≤—ã–¥–∞—Ç—å –∫—Ä—É–∂–∫–∏':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute("SELECT cardid, tags FROM users WHERE tgid=?", (tgid,))
        info = cur.fetchone()

        tags = info[1]

        if 'customer' in tags or 'admin' in tags:
            markup = types.ReplyKeyboardMarkup()
            btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
            markup.row(btn1)
            bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=markup)
            bot.register_next_step_handler(message, cupsinfo)
        else:
            pass

    if message.text.lower() == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute("SELECT cardid, tags FROM users WHERE tgid=?", (tgid,))
        info = cur.fetchone()

        if 'admin' in info[1]:
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏', callback_data='admtags')
            btn2 = types.InlineKeyboardButton('–í—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—à–µ–∫', callback_data='admlogs')
            btn3 = types.InlineKeyboardButton('–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ü–µ–Ω–æ–∫', callback_data='admrates')
            btn4 = types.InlineKeyboardButton('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='admnews')
            btn5 = types.InlineKeyboardButton('–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å(–ø–æ–º–æ—â—å)', callback_data='admhelp')
            markup.row(btn1)
            markup.row(btn2, btn3)
            markup.row(btn4)
            markup.row(btn5)

            bot.send_message(message.chat.id, '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è üçÉ:</b>', reply_markup=markup, parse_mode='html')
        else:
            pass

    if message.text.lower() == 'customer':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET tags = tags || ' ' || 'customer' WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'admin':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET tags = tags || ' ' || 'admin' WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'vip':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET tags = tags || ' ' || 'vip' WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'special':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET tags = tags || ' ' || 'special' WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'cleartags':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET tags = ' ' WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'clearcups':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET cups = 0 WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()
    if message.text.lower() == 'cupstest':
        tgid = message.from_user.id
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET cups = 12 WHERE tgid = {tgid}")
        conn.commit()
        cur.close()
        conn.close()

    if message.text.lower() == 'list':
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        info = ''
        for el in users:
            info += f'TGID: {el[1]} ID –ö–∞–±–∏–Ω–µ—Ç–∞: {el[2]} –ß–∞—à–∫–∏: {el[3]} –¢—ç–≥–∏:{el[4]}\n'

        cur.close()
        conn.close()

        bot.send_message(message.chat.id, info)
    if message.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞':
        bot.send_message(757282114, f'–ü–∏—É –ø–∞—É')
    elif message.text.lower() == 'id':
        bot.reply_to(message, f'ID: {message.from_user.id}')




def cupsinfo(message):
    global cardid
    cardidstr = str(message.text.strip())
    if message.text.lower() == 'list' or message.text.lower() == '/menu' or message.text.lower() == '/proms' or message.text.lower() == '/contacts'or message.text.lower() == '/address'or message.text.lower() == 'cleartags':
        inform(message)
    elif message.text.strip() == '–í—ã–π—Ç–∏' or message.text.lower() == '/start':
        start(message)
    else:
        global tags
        if cardidstr.isnumeric() == False:
            tgid = message.from_user.id
            conn = sqlite3.connect('heypopei.sql')
            cur = conn.cursor()

            cur.execute("SELECT tags FROM users WHERE tgid=?", (tgid,))
            info = cur.fetchone()
            tags = info[1]
            if 'admin' in tags:
                markup = types.ReplyKeyboardMarkup()
                btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
                markup.row(btn1)
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—á–∏—Å–ª–æ)')
            bot.register_next_step_handler(message, cupsinfo)
        else:
            cardid = int(message.text.strip())

            conn = sqlite3.connect('heypopei.sql')
            cur = conn.cursor()

            cur.execute("SELECT cups, tags FROM users WHERE cardid=?", (cardid,))

            info = cur.fetchone()

            if info is None:
                markup = types.ReplyKeyboardMarkup()
                if 'admin' in tags:
                    btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
                    markup.row(btn1)
                bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cardid} –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å'
                                                  f' –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
                bot.register_next_step_handler(message, cupsinfo)
            else:
                global i
                i = 'default'
                if 'vip' in info[1]:
                    i = 'vip'
                elif 'special' in info[1]:
                    i = 'special'

                markup = types.InlineKeyboardMarkup()
                global cups, cupsav
                cups = info[0]
                cupsav = cups // cups_max[i]
                if cupsav > 0:
                    btn1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å ‚òïÔ∏è', callback_data='cupadd')
                    btn2 = types.InlineKeyboardButton('–í—ã–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ‚òïÔ∏è', callback_data='cupdelete')
                    markup.row(btn1, btn2)
                else:
                    btn1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å ‚òïÔ∏è', callback_data='cupadd')
                    markup.row(btn1)
                bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {cardid}\n'
                                                  f'–í—ã–ø–∏—Ç–æ –∫—Ä—É–∂–µ–∫: {cups} / {cups_max[i]} \n'
                                                  f'–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª. –∫—Ä—É–∂–µ–∫: {cups // cups_max[i]}', reply_markup=markup)


def cupadd(message):
    global drunkcups
    cardidstr = str(message.text.strip())
    cardidstr.translate({ord(i): None for i in '123'})
    if message.text.strip() == '–í—ã–π—Ç–∏':
        start(message)
    else:
        if cardidstr.isnumeric() == False:
            markup = types.ReplyKeyboardMarkup()
            btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
            markup.row(btn1)
            global cups

            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–∂–µ–∫ (—á–∏—Å–ª–æ)', reply_markup=markup)
            bot.register_next_step_handler(message, cupadd)
        else:
            drunkcups = int(message.text.strip())
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–î–∞', callback_data='cupaddyes')
            btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cupaddno')
            markup.row(btn1, btn2)

            bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–ª—è—é {drunkcups} ‚òï –ø—Ä–æ—Ñ–∏–ª—é {cardid} ?', reply_markup=markup)

def cupdelete(message):
    global drunkcups, cupsav
    cardidstr = str(message.text.strip())
    if message.text.strip() == '–í—ã–π—Ç–∏':
        start(message)
    else:
        if cupsav == 1:
            drunkcups = 1
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–î–∞', callback_data='cupdeleteyes')
            btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cupdeleteno')
            markup.row(btn1, btn2)

            bot.send_message(message.chat.id, f'–í—ã–¥–∞—é {drunkcups} ‚òï –ø—Ä–æ—Ñ–∏–ª—é {cardid} ?', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup()
            btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
            markup.row(btn1)
            if cardidstr.isnumeric() == False:
                bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–∂–µ–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {cupsav})', reply_markup=markup)
                bot.register_next_step_handler(message, cupdelete)
            else:
                drunkcups = int(message.text.strip())
                if drunkcups > cupsav or drunkcups <= 0:
                    bot.send_message(message.chat.id, f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—à–µ–∫ <b>{cupsav}</b>' 
                                                      f'\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—à–µ–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ '
                                                      f'(—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {cupsav})', reply_markup=markup,
                                     parse_mode='html')
                    bot.register_next_step_handler(message, cupdelete)
                else:
                    markup = types.InlineKeyboardMarkup()
                    btn1 = types.InlineKeyboardButton('–î–∞', callback_data='cupdeleteyes')
                    btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cupdeleteno')
                    markup.row(btn1, btn2)

                    bot.send_message(message.chat.id, f'–í—ã–¥–∞—Ç—å {drunkcups} ‚òï –ø—Ä–æ—Ñ–∏–ª—é {cardid} ?', reply_markup=markup)

def cupdeleteaccept(message):
    authcodestr = str(message.text.strip())
    if message.text.strip() == '–í—ã–π—Ç–∏':
        start(message)
    else:
        if authcodestr.isnumeric() == False:
            markup = types.ReplyKeyboardMarkup()
            btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
            markup.row(btn1)
            global cups

            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—á–∏—Å–ª–æ)', reply_markup=markup)
            bot.register_next_step_handler(message, cupdeleteaccept)
        else:
            conn = sqlite3.connect('heypopei.sql')
            cur = conn.cursor()

            cur.execute("SELECT authcode FROM users WHERE cardid=?", (cardid,))

            info = cur.fetchone()

            cur.close()
            conn.close()

            authcode = info[0]
            markup = types.ReplyKeyboardMarkup()
            btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
            markup.row(btn1)
            if str(authcode) != authcodestr:
                bot.send_message(message.chat.id, f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
                bot.register_next_step_handler(message, cupdeleteaccept)
            else:
                # –ó–ê–ü–ò–°–¨ –í –õ–û–ì–ò
                global newcups, i, cups
                newcups = cups - drunkcups * cups_max[i]
                conn = sqlite3.connect('heypopei.sql')
                cur = conn.cursor()
                cur.execute(f"UPDATE users SET cups = {newcups} WHERE cardid = {cardid}")
                conn.commit()
                cur.close()
                conn.close()
                bot.send_message(message.chat.id, f'–í—ã–¥–∞–ª–∏ {drunkcups} ‚òï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {cardid}' '\n\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –∫—Ä—É–∂–∫–∏'  )
                bot.register_next_step_handler(message, cupsinfo)

def admtagsinfo(message):
    if message.forward_from is None:
        global cardid
        cardidstr = str(message.text.strip())
        if message.text.lower() == 'list' or message.text.lower() == '/menu' or message.text.lower() == '/proms'\
                or message.text.lower() == '/contacts' or message.text.lower() == '/address'\
                or message.text.lower() == 'cleartags':
            inform(message)
        elif message.text.strip() == '–í—ã–π—Ç–∏' or message.text.lower() == '/start':
            start(message)
        else:
            global tags
            if not cardidstr.isnumeric():
                markup = types.ReplyKeyboardMarkup()
                btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
                markup.row(btn1)
                bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—á–∏—Å–ª–æ) –∏–ª–∏'
                                                  ' –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                bot.register_next_step_handler(message, admtagsinfo)
            else:
                cardid = int(message.text.strip())

                conn = sqlite3.connect('heypopei.sql')
                cur = conn.cursor()

                cur.execute("SELECT cups, tags FROM users WHERE cardid=?", (cardid,))

                info = cur.fetchone()

                if info is None:
                    markup = types.ReplyKeyboardMarkup()
                    btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
                    markup.row(btn1)
                    bot.send_message(message.chat.id,
                                     f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cardid} –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å '
                                     '–≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–ï—â—ë –º–æ–∂–Ω–æ –ø–µ–ø—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
                                     ' –ï–≥–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑—å–º—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', reply_markup=markup)
                    bot.register_next_step_handler(message, admtagsinfo)
                else:
                    global i
                    i = 'default'
                    if 'vip' in info[1]:
                        i = 'vip'
                    elif 'special' in info[1]:
                        i = 'special'
                    global cups, cupsav
                    cups = info[0]
                    cupsav = cups // cups_max[i]
                    markup = types.InlineKeyboardMarkup()
                    if cups > 0:
                        btn1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫—Ä—É–∂–∫–∏ X', callback_data='admincupsdelete')
                        markup.row(btn1)
                    else:
                        pass
                    n2 = '\n\n'
                    n = '\n'
                    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {cardid}\n'
                                                      f'–í—ã–ø–∏—Ç–æ –∫—Ä—É–∂–µ–∫: {cups} / {cups_max[i]} \n'
                                                      f'–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª. –∫—Ä—É–∂–µ–∫: {cups // cups_max[i]}'
                                                      f'{f"{n2}" "–†–æ–ª–∏:" if info[1] != " " else ""}'
                                                      f'{f"{n}" "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if "admin" in info[1] else ""}'
                                     ,
                                     reply_markup=markup)



    else:
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. <a href="tg://user?id={message.forward_from.id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>',
                         parse_mode='html')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'cupadd':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç—ã—Ö –∫—Ä—É–∂–µ–∫')
        bot.register_next_step_handler(callback.message, cupadd)
    if callback.data == 'cupdelete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        if cupsav > 0:
            cupdelete(callback.message)
        else:
            bot.send_message(callback.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–∂–µ–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ (–æ—Ç 1 –¥–æ {cupsav}')
            bot.register_next_step_handler(callback.message, cupdelete)
    if callback.data == 'cupaddyes':
        newcups = cups + drunkcups
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        global tags
        markup = types.ReplyKeyboardMarkup()
        if 'admin' in tags:
            btn1 = types.InlineKeyboardButton('–í—ã–π—Ç–∏ ', callback_data='exit')
            markup.row(btn1)
        bot.send_message(callback.message.chat.id, f'–ì–æ—Ç–æ–≤–æ!\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –∫—Ä—É–∂–∫–∏', reply_markup=markup)
        bot.register_next_step_handler(callback.message, cupsinfo)
        # –î–û–ë–ê–í–ò–¢–¨ –ó–ê–ü–ò–°–¨ –í –õ–û–ì
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET cups = {newcups} WHERE cardid = {cardid}")
        conn.commit()
        cur.close()
        conn.close()
    if callback.data == 'cupaddno':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        startcustomer(callback.message)
    if callback.data == 'cupdeleteyes':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        authcode = random.randint(1000, 9999)
        bot.send_message(callback.message.chat.id, f'–í—ã—Å–ª–∞–ª–∏ –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {cardid} ‚òï' '\n\n –í–≤–µ–¥–∏ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()

        cur.execute("SELECT tgid FROM users WHERE cardid=?", (cardid,))

        info = cur.fetchone()

        cur.close()
        conn.close()

        tgidus = info[0]

        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET authcode = {authcode} WHERE cardid = {cardid}")
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(tgidus, '–ü—Ä–∏–≤–µ—Ç üçÉ\n'f'–¢–≤–æ–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {authcode}' '\n–°–æ–æ–±—â–∏ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å' f' {drunkcups} ‚òï –±–µ—Å–ø–ª–∞—Ç–Ω–æ')
        bot.register_next_step_handler(callback.message, cupdeleteaccept)
    if callback.data == 'cupdeleteno':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        startcustomer(callback.message)
    if callback.data == 'admtags':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        markup = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('–í—ã–π—Ç–∏')
        markup.row(btn1)
        bot.send_message(callback.message.chat.id,'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ üçÉ\n\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö', reply_markup=markup)
        bot.register_next_step_handler(callback.message, admtagsinfo)
    if callback.data == 'admincupsdelete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–∂–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç 1 –¥–æ {cups}')
        bot.register_next_step_handler(callback.message, cupdelete)
        '''
        conn = sqlite3.connect('heypopei.sql')
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET cups = {newcups} WHERE cardid = {cardid}")
        conn.commit()
        cur.close()
        conn.close()
        '''
    """
    conn = sqlite3.connect('heypopei.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    info = ''
    for el in users:
        info += f'TGID: {el[1]} ID –ö–∞–±–∏–Ω–µ—Ç–∞: {el[2]} –ß–∞—à–∫–∏: {el[3]} –¢—ç–≥–∏:{el[4]}\n'

    cur.close()
    conn.close()

    bot.send_message(callback.message.chat.id, info)
    """

bot.infinity_polling()
